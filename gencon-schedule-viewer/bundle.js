(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var summary_1 = require("./summary");
var results_1 = require("./results");
exports.$ = function (arg) {
    return document.querySelector(arg);
};
exports.searchState = {
    currentTime: new Date().getHours().toString(),
    currentDay: new Date().getDate().toString(),
    next_url: null
};
var updateSearchTime = function (event) {
    exports.searchState.currentTime = event.target.value;
    console.log('update ', JSON.stringify(exports.searchState));
};
var updateSearchDay = function (event) {
    exports.searchState.currentDay = event.target.value;
    console.log('update ', JSON.stringify(exports.searchState));
};
function initSelect() {
    var timeSelect = exports.$('select#current-time');
    timeSelect.value = exports.searchState.currentTime;
    timeSelect.addEventListener('change', updateSearchTime);
    var daySelect = exports.$('select#current-day');
    daySelect.value = exports.searchState.currentDay.toString();
    daySelect.addEventListener('change', updateSearchDay);
    var button = exports.$('button');
    button.addEventListener('click', exports.search);
    var nextButton = exports.$('button#next');
    nextButton.addEventListener('click', summary_1.fetchNextResults);
}
exports.initSelect = initSelect;
exports.search = function (urlOrEvent) {
    var fetchUrl = '';
    if (typeof urlOrEvent == 'string') {
        fetchUrl = urlOrEvent;
    }
    else {
        fetchUrl = "https://www.gencon.com/api/event_search?opt[]=ta&day[]=" + exports.searchState.currentDay + "&hour[]=" + exports.searchState.currentTime;
    }
    fetch(fetchUrl).then(function (res) { return res.json(); }).then(function (response) {
        summary_1.updateSummary(response);
        results_1.updateResults(response.records);
    });
};
initSelect();

},{"./results":2,"./summary":3}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var main_1 = require("./main");
var allResults = {};
exports.updateResults = function (records) {
    document.querySelectorAll('#all tbody tr').forEach(function (el) { return el.remove(); });
    records.forEach(function (record) {
        var shortTr = document.createElement('tr');
        var detailTr = document.createElement('tr');
        shortTr.insertCell().innerText = record._source.title;
        shortTr.insertCell().innerText = record._source.event_type;
        shortTr.insertCell().innerText = record._source.event_duration;
        shortTr.insertCell().innerText = record._source.location + ' ' + record._source.room_name;
        var details = shortTr.insertCell();
        var detailButton = document.createElement('button');
        detailButton.innerText = 'Details';
        detailButton.setAttribute('g-id', record._source.id.toString());
        detailButton.addEventListener('click', showDetails);
        details.appendChild(detailButton);
        var detailCell = detailTr.insertCell();
        detailCell.colSpan = 5;
        detailCell.innerHTML = "\n            <ul>\n                <li> <a href=\"https://www.gencon.com/events/" + record._source.id + "\">Link:</a></li>\n                <li> " + record._source.short_description + "</li>\n            </ul>\n        ";
        main_1.$('#all tbody').appendChild(shortTr);
        main_1.$('#all tbody').appendChild(detailTr);
        allResults[record._source.id] = record._source;
    });
};
var updateDetails = function (event) {
    var text = JSON.stringify(event, null, "@@");
    main_1.$('#details').innerHTML = "\n    <pre>\n    Details: \n        " + JSON.stringify(event, null, "&nbsp;") + "\n</pre>\n    ";
};
var showDetails = function (event) {
    var recordId = event.target.getAttribute('g-id');
    updateDetails(allResults[recordId]);
};

},{"./main":1}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var main_1 = require("./main");
var mapSearchTimeToHours = function () {
    var time_int = parseInt(main_1.searchState.currentTime);
    var isPm = time_int > 12;
    return time_int % 12 + ":00 " + (isPm ? 'pm' : 'am');
};
var mapSearchTimeToDays = function () {
    var numberDayMap = {
        '1': 'Thursday',
        '2': 'Friday',
        '3': 'Saturday',
        '4': 'Sunday'
    };
    // @ts-ignore
    return numberDayMap[main_1.searchState.currentDay];
};
exports.fetchNextResults = function () {
    var url = main_1.searchState.next_url;
    if (url) {
        main_1.search('https://www.gencon.com' + url);
    }
    else {
        throw new Error("Invalid state, fetching next results without a next url");
    }
};
exports.updateSummary = function (genconResponse) {
    main_1.$('#synopsis').textContent = genconResponse.records.length + " events were retrieved for " + mapSearchTimeToHours() + " on " + mapSearchTimeToDays();
    if (genconResponse.has_more) {
        main_1.$('#more').textContent = "There are more events";
        main_1.$('#next').hidden = false;
        main_1.searchState.next_url = genconResponse.next_path;
    }
    else {
        main_1.$('#more').textContent = "There are no more events";
        main_1.$('#next').hidden = true;
        main_1.searchState.next_url = null;
    }
};

},{"./main":1}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
