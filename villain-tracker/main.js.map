{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/damage-button-group/damage-button-group.component.html","webpack:///./src/app/damage-button-group/damage-button-group.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,4E;;;;;;;;;;;;ACXA;AAAA;AAAA;AAAuD;AAEvD,IAAM,MAAM,GAAW,EAAE,CAAC;AAE1B;IAAA;IAIgC,CAAC;IAAD,uBAAC;AAAD,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kGCTjC,uHAA4C,KAC1C,4mBAAmD,yBAA1B,kBAAyB,oBAAlD,YAAmD,EAA1B,SAAyB;0LADpD,8cAA4C,iDAAvC,mBAAsC,cAA3C,YAA4C,EAAvC,SAAsC;;;;;;;;;;;;;;;;ACA3C;AAAA;AAAA;AAAA;AAAiE;AACoC;AAErG;IAAA;QAME,UAAK,GAAG,kCAAkC,CAAC;QAI3C,gBAAW,GAAG,CAAC,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,UAAU;YAC3D,WAAW,EAAE,OAAO,EAAE,aAAa,EAAE,SAAS,EAAE,SAAS,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;IAOjF,CAAC;IALC,uCAAgB,GAAhB;QACE,OAAO,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,UAAC,SAAiB,EAAE,QAAoC;YACxF,OAAO,SAAS,GAAG,QAAQ,CAAC,WAAW,CAAC;QAC1C,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACT,CAAC;IACH,mBAAC;AAAD,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACZD;AAAA;AAAA;IAAA;IAgByB,CAAC;IAAD,gBAAC;AAAD,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gHCzB1B,y6EAAgB,MAEd;;;;;;;;;m6BAAwD,KAE1D,wHAAK,KACH,8PAA0D,YAAhC;;wBAA+B;MAAzD,2qBAA0D,2EAAE,MAAS,8EAErE,oQAAyD,YAA/B;;wBAA8B;MAAxD,2qBAAyD,2EAAE,mDAL3C,oBAAqB,cAAC,qBAAiB,EAAvD,aAAwD,EAAxC,UAAqB,EAAC,UAAiB,mDAFzD,6wEAAgB,IAEd,s/BAAwD,GAGxD,wPAA0D,GAAW,0DAErE,2PAAyD;;;;;;;;;;;;;;;;ACP3D;AAAA;AAAA;AAAuD;AAEvD;IAYE;QAFA,gBAAW,GAAW,CAAC,CAAC;IAER,CAAC;IAEjB,6CAAQ,GAAR;IACA,CAAC;IAED,sDAAiB,GAAjB,UAAkB,YAAoB;QACpC,IAAI,CAAC,WAAW,IAAI,YAAY,CAAC;IACnC,CAAC;IACH,iCAAC;AAAD,CAAC;;;;;;;;;;;;;;ACtBD;AAAA;AAAA,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;AAEzD,IAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;;GAMG;AACH,mEAAmE;;;;;;;;;;;;;ACfnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkB;AAC6B;AAIU;;;AAEzD,IAAI,qEAAW,CAAC,UAAU,EAAE;IAC1B,oEAAc,EAAE,CAAC;CAClB;AAED,2EAAwB,uBAAgB,CAAC,6EAAU;KAChD,KAAK,CAAC,aAAG,IAAI,cAAO,CAAC,KAAK,CAAC,GAAG,CAAC,EAAlB,CAAkB,CAAC,CAAC","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","<div *ngFor=\"let damageType of damageTypes\">\n  <app-damage-button-group [damageType]=\"damageType\"></app-damage-button-group>\n</div>\n","import {Component, QueryList, ViewChildren} from '@angular/core';\nimport {DamageButtonGroupComponent} from 'src/app/damage-button-group/damage-button-group.component';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'sentinels-villain-damage-tracker';\n\n  @ViewChildren(DamageButtonGroupComponent) damageButtons: QueryList<DamageButtonGroupComponent>;\n\n  damageTypes = ['GLOBAL', 'COLD', 'ENERGY', 'FIRE', 'INFERNAL',\n    'LIGHTNING', 'MELEE', 'PROJfECTILE', 'PSYCHIC', 'RADIANT', 'SONIC', 'TOXIC'];\n\n  getCurrentDamage() {\n    return this.damageButtons.reduce(((prevValue: number, curValue: DamageButtonGroupComponent) => {\n      return prevValue + curValue.damageTotal;\n    }), 0);\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport {MatButtonModule, MatFormFieldModule, MatInputModule} from '@angular/material';\nimport { DamageButtonGroupComponent } from './damage-button-group/damage-button-group.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    DamageButtonGroupComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    MatButtonModule,\n    MatInputModule,\n    MatFormFieldModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","<mat-form-field>\n\n  <input matInput [value]=\"damageTotal\" [readonly]=\"true\">\n</mat-form-field>\n<div>\n  <button mat-raised-button (click)=\"updateDamageTotal(-1)\">-1</button>\n  {{damageType}}\n  <button mat-raised-button (click)=\"updateDamageTotal(1)\">+1</button>\n</div>\n","import {Component, Input, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'app-damage-button-group',\n  templateUrl: './damage-button-group.component.html',\n  styleUrls: ['./damage-button-group.component.css']\n})\nexport class DamageButtonGroupComponent implements OnInit {\n\n  @Input()\n  damageType: string;\n\n  damageTotal: number = 0;\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n  updateDamageTotal(damageChange: number) {\n    this.damageTotal += damageChange;\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import 'hammerjs';\nimport { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}