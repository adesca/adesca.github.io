{"version":3,"sources":["assets/mainBoard.png","assets/legend.jpeg","Cities.tsx","modules/city.tsx","Board.tsx","Players.tsx","data/city_list.tsx","deck/CardClasses.tsx","deck/DeckProvider.tsx","deck/RationedEventSelector.tsx","App.tsx","serviceWorker.js","index.js"],"names":["module","exports","Cities","cityEls","map","name","props","className","supplyCubes","diseaseCubes","City","Board","src","legend","alt","width","height","mainBoard","characterData","PlayerView","useState","traits","updateTraits","traitsList","trait","onChange","event","visibleTraits","target","value","cityList","searchCards","upgradedCards","count","upgrade","CityCard","isUpgrade","isSearch","details","detailsUI","this","RationedEventCard","EpidemicCard","ProduceSuppliesCard","remainingChecks","Deck","rationedEvents","unshuffledDeck","shuffledDeck","maybeShuffled","localStorage","getItem","maybeUnshuffled","JSON","parse","fillDeck","shuffle","unshuffledDeckCopy","slice","i","forEach","card","idx","nextSwapIdx","length","Math","floor","random","Object","entries","cityName","cardCount","searchCardIsPlaced","upgradeCardIsPlaced","push","concat","eventName","setItem","stringify","playerCards","splice","bound","ceil","epidemicIndex1","epidemicIndex2","epidemicIndex3","epidemicIndex","console","log","RationedEventSelector","_rationedEvents","updateRationedEvents","handleClick","clickEvent","currentTarget","assign","checkboxes","keys","eveName","type","checked","onClick","submitRationedEvents","evt","App","updateRationedEventsState","deckView","deck","cards","display","DeckView","events","drawInitialCards","playerSections","player","cardsDisplay","Players","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6d5fd950.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mainBoard.4b91ef39.png\";","module.exports = __webpack_public_path__ + \"static/media/legend.bf8b6ea5.jpeg\";","import {City, CityProp} from \"./modules/city\";\nimport React from \"react\";\n\nexport function Cities() {\n    const cities = ['New York', 'Washington', 'Jacksonville', 'Sao Paulo', 'London',\n        'Istanbul', 'Tripoli', 'Cairo', 'Lagos', 'Chicago', 'Atlanta', 'Denver', 'San Francisco',\n        'Los Angeles', 'Mexico City', 'Buenos Aires', 'Lima']\n\n\n    const cityEls = cities.map(name => {\n        const props: CityProp = {name: name, supplyCubes: 0, diseaseCubes: 0}\n\n        return City(props)\n    })\n\n    return (\n        <div className=\"d-flex flex-column\">\n            <div className=\"d-flex flex-column\">\n                {cityEls}\n            </div>\n        </div>\n    );\n}\n","import * as React from \"react\";\nimport {Col, Container, Row} from \"react-bootstrap\";\n\nexport function City(props: CityProp) {\n\n    return (<div className='d-flex flex-row'>\n        <div>{`${props.name} ${props.supplyCubes} ${props.diseaseCubes}`}</div>\n    </div>)\n    \n}\n\nexport interface CityProp {\n    name: string,\n    supplyCubes: number,\n    diseaseCubes: number\n}\n","import mainBoard from './assets/mainBoard.png'\nimport logo from './assets/logo.svg';\nimport legend from './assets/legend.jpeg'\nimport * as React from \"react\";\nimport './Board.css'\nimport {Col, Container, Row} from \"react-bootstrap\";\n\n\nexport function Board() {\n    return (\n        <div className={'d-flex flex-row'}>\n            <img src={legend}  alt=\"legend\"\n            width='30%' height='30%'/>\n\n            <img src={mainBoard}\n                 width='60%' height='30%' alt=\"board\"/>\n        </div>\n    )\n}\n","import * as React from \"react\";\nimport {Deck} from \"./deck/DeckProvider\";\nimport {ChangeEvent, useState} from \"react\";\nimport {Card} from \"./deck/CardClasses\";\nimport './Players.css'\n\nconst characterData: { [key: string]: string[] } = {\n    'Vanessa': [\n        'Farmer - Once on your turn when doing the Make Supplies action, you may immediately ' +\n        'do the Deliver Supplies action for free',\n        'Runner - As an action, discard a City card while in a haven or supply center to move to any location ' +\n        'on the grid'\n    ],\n    '(The Immunologist)': [\n        'Immunologist - When doing the Make Supplies action, you may take the Supply cube(s) from the reserve ' +\n        '(instead of the stockpile)'],\n    'Shadow': [\n        'Radio Operator - WHenever you do the Transfer Supplies free action, you may give or take Supply cubes from ' +\n        'a player in any location',\n        'Broker - As an action, discard a City card to take a card of the same color from the Player discard pile',\n        'Fastidious (Scar) - You need 1 extra City card (of the same color) to do the Build Supply Center action'\n    ],\n    'Kate': [\n        'Laborer -  You may do the Build Supply Center action with 1 fewer card if you spend 2 supply cubes from your character card',\n        'Helmsman - You may do a free Drive/Ferry action each turn',\n        'Hoarder (Scar) - When doing the Deliver Supplies action, you may not put your last 2 supply cubes onto the board'\n    ],\n    'Marlowe': [\n        'Administrator - Once on your turn, as an action, move a pawn to any other pawn',\n        'Architect - You may do the build supply center action with 1 fewer card'\n    ]\n\n}\n\nexport function Players(props: PlayerProps) {\n    const playerState = [{}, {}, {}, {}]\n\n    let playerCards: Card[][] | null = null;\n    if (props.deck) {\n        playerCards = props.deck.drawInitialCards()\n    }\n    const playerSections = playerState.map((player, idx) => {\n\n        let cardsDisplay = null\n        if (playerCards) {\n            cardsDisplay = playerCards[idx].map(cards => cards.display())\n        }\n\n        return (<div className='col player'>\n            <PlayerView/>\n            <div className='d-flex'>\n                <ul className='d-flex'>{cardsDisplay}</ul>\n            </div>\n        </div>)\n    })\n\n    return (<div>\n\n        <div className='row'>\n            {playerSections}\n\n        </div>\n\n    </div>)\n}\n\nfunction PlayerView() {\n    const [traits, updateTraits] = useState<string[]>(characterData['Vanessa'])\n\n    const handleChange = (event: ChangeEvent<HTMLSelectElement>) => {\n        const visibleTraits = characterData[event.target.value];\n        updateTraits(visibleTraits)\n    }\n\n    const traitsList = traits.map(trait => {\n        return (<li>{trait}</li>)\n    })\n\n    return (\n        <div className='character'>\n            <label>Character name: </label>\n            <select onChange={handleChange}>\n                <option>Vanessa</option>\n                <option>Marlowe</option>\n                <option>Kate</option>\n                <option>Shadow</option>\n                <option>(The Immunologist)</option>\n            </select>\n\n            <ul>\n                {traitsList}\n            </ul>\n        </div>\n\n\n    )\n}\n\nexport interface PlayerProps {\n    deck: Deck | null\n}\n","import {UpgradeDetails} from \"../deck/CardClasses\";\n\nexport const cityList = {\n    'New York': 4,\n    'Washington': 4,\n\n    'Jacksonville': 4,\n    'Sao Paulo': 4,\n\n    'London': 4,\n\n    'Istanbul': 4,\n\n    'Tripoli': 4,\n    'Cairo': 4,\n\n    'Lagos': 4,\n    'Chicago': 2,\n\n    'Atlanta': 1,\n    'Denver': 2,\n\n    'San Francisco': 2,\n\n    'Los Angeles': 1,\n\n    'Mexico City': 1,\n    'Buenos Aires': 2,\n\n    'Lima': 1   ,\n}\n\nexport const searchCards: {[key: string]: any} = {\n    'Atlanta': {},\n    'Los Angeles': {},\n    'Mexico City': {\n        'effect': 'Companion: Scout'\n    },\n    'Denver': {},\n    'San Francisco': {},\n    'Chicago': {}\n}\n\nexport const upgradedCards: {[key: string]: UpgradeDetails} = {\n    'Sao paulo': {\n        'upgrade': 'Foundation',\n        count: 1\n    },\n    'Istanbul': {\n        upgrade: 'Foundation',\n        count: 1\n    },\n    'Cairo': {\n        upgrade: 'Foundation',\n        count: 1\n    }\n}\n","import * as React from \"react\";\n\nexport class CityCard {\n    constructor(public name: string, private isUpgrade: boolean, private isSearch: boolean,\n                public details?: UpgradeDetails) {\n    }\n\n    display() {\n        let detailsUI = (<span></span>)\n\n        if (this.isUpgrade) {\n            detailsUI = (<ul>\n                <li>Upgrade: {this.details!.upgrade}</li>\n            </ul>)\n        }\n\n        if (this.isSearch) {\n            detailsUI = (<ul>\n                <li>Search card</li>\n            </ul>)\n        }\n\n        return (<li className='border border-primary'> City: {this.name}\n            {detailsUI}\n        </li>)\n    }\n}\n\nexport class RationedEventCard {\n    constructor(public name: string) {}\n\n    display() {\n        return (<li className='border border-primary'> Rationed event: {this.name}\n        </li>)\n    }\n}\n\nexport class EpidemicCard implements Card{\n    readonly name: string = \"Epidemic card\";\n\n    display() {\n        return (<li> Epidemic </li>)\n    }\n}\n\nexport class ProduceSuppliesCard implements Card{\n    readonly name: string;\n    constructor(remainingChecks: number) {\n        this.name = `Produce supplies (${remainingChecks} uses)`\n    }\n\n    display() {\n        return (<li className='border border-primary'> Produce supplies {this.name}\n        </li>)\n    }\n}\n\nexport interface UpgradeDetails {\n    upgrade: string,\n    count: number\n}\n\nexport interface Card {\n    name: string\n    display: () => JSX.Element\n}\n","import * as React from \"react\";\nimport {cityList, searchCards, upgradedCards} from \"../data/city_list\";\nimport {Card, CityCard, EpidemicCard, ProduceSuppliesCard, RationedEventCard} from \"./CardClasses\";\n\nexport class Deck {\n\n    unshuffledDeck: Card[] = [];\n    shuffledDeck: Card[] = [];\n\n    constructor(rationedEvents: string[]) {\n        const maybeShuffled = localStorage.getItem('shuffled');\n        const maybeUnshuffled = localStorage.getItem('unshuffled')\n\n        if (maybeShuffled && maybeUnshuffled) {\n            this.shuffledDeck = JSON.parse(maybeShuffled)\n            this.unshuffledDeck = JSON.parse(maybeUnshuffled)\n        } else {\n            this.fillDeck(rationedEvents)\n            this.shuffle()\n        }\n    }\n\n    shuffle() {\n        const unshuffledDeckCopy = this.unshuffledDeck.slice()\n\n        for (let i = 0; i < 3; i++) {\n\n            unshuffledDeckCopy.forEach((card, idx) => {\n                let nextSwapIdx = this.unshuffledDeck.length - Math.floor(Math.random() * this.unshuffledDeck.length)\n\n                if (nextSwapIdx === this.unshuffledDeck.length) {\n                    nextSwapIdx = this.unshuffledDeck.length - 1\n                }\n\n                unshuffledDeckCopy[idx] = unshuffledDeckCopy[nextSwapIdx]\n                unshuffledDeckCopy[nextSwapIdx] = card\n            })\n        }\n\n        this.shuffledDeck = unshuffledDeckCopy.slice()\n\n    }\n\n    fillDeck(rationedEvents: string[]) {\n        Object.entries(cityList).forEach(([cityName, cardCount]) => {\n            let searchCardIsPlaced = false\n            let upgradeCardIsPlaced = false\n\n            for (let i = 0; i < cardCount; i++) {\n                if (searchCards[cityName] && !searchCardIsPlaced) {\n                    this.unshuffledDeck.push(new CityCard(cityName, false, true))\n                    searchCardIsPlaced = true\n\n                } else if (upgradedCards[cityName] && !upgradeCardIsPlaced) {\n                    const details = upgradedCards[cityName]\n\n                    this.unshuffledDeck.push(new CityCard(cityName, true, false, details))\n                    upgradeCardIsPlaced = true\n                } else {\n                    this.unshuffledDeck.push(new CityCard(cityName, false, false))\n                }\n            }\n        })\n\n        this.unshuffledDeck = this.unshuffledDeck\n            .concat(\n                rationedEvents.map(eventName => new RationedEventCard(eventName))\n            ).concat(\n                [new RationedEventCard(\"Strategic Reserves (unrationed)\")]\n            )\n\n        for (let i = 0; i < 3; i++) {\n            this.unshuffledDeck.push(new ProduceSuppliesCard(2))\n        }\n\n        for (let i = 0; i < 5; i++) {\n            this.unshuffledDeck.push(new ProduceSuppliesCard(1))\n        }\n    }\n\n    save() {\n        localStorage.setItem('shuffled', JSON.stringify(this.shuffledDeck))\n        localStorage.setItem('unshuffled', JSON.stringify(this.unshuffledDeck))\n    }\n\n    drawInitialCards() {\n        const playerCards = [\n            this.shuffledDeck.splice(0, 2),\n            this.shuffledDeck.splice(0, 2),\n            this.shuffledDeck.splice(0, 2),\n            this.shuffledDeck.splice(0, 2)\n        ]\n\n        const bound = Math.ceil(this.shuffledDeck.length / 7)\n        for (let i=0; i< 7; i++) {\n            const epidemicIndex1 = Math.random() * bound + (7*i)\n            const epidemicIndex2 = Math.random() * bound + (7*i)\n            const epidemicIndex3 = Math.random() * bound + (7*i)\n\n            const epidemicIndex = Math.ceil((epidemicIndex1 + epidemicIndex2 + epidemicIndex3) / 3)\n            this.shuffledDeck.splice(epidemicIndex, 0, new EpidemicCard())\n        }\n\n        console.log('deck ', this.shuffledDeck)\n        return playerCards\n    }\n\n}\n\n\nexport function DeckView(deck: Deck) {\n    const cards = deck.shuffledDeck.map(card => card.display())\n\n    return (<div>\n        Deck functions\n        <ul>\n            {cards}\n        </ul>\n\n    </div>)\n}\n","import {RationedEventCard} from \"./CardClasses\";\nimport * as React from \"react\";\nimport {useState} from \"react\";\n\nconst rationedEventsList = ['extended forecast', 'one quiet night', 'Drastic Measures', 'It worked the first time',\n    'Hidden stockpile', 'Airlift', 'Team Bravo', 'Dispersal', 'Data Transfer', 'Resilient Population',\n    'Extended Time']\n\nconst rationedEvents: { [key: string]: boolean } = {}\nrationedEventsList.forEach(evt => rationedEvents[evt] = false)\n\nexport function RationedEventSelector(props: RationedEventSelectorProps) {\n\n    const [_rationedEvents, updateRationedEvents] = useState(rationedEvents)\n    const handleClick = (clickEvent: React.MouseEvent<HTMLInputElement>) => {\n        _rationedEvents[clickEvent.currentTarget.name] = !_rationedEvents[clickEvent.currentTarget.name]\n        updateRationedEvents(Object.assign({}, _rationedEvents))\n    }\n\n    const submitEvents = () => {\n        console.log('submitting')\n        props.submitRationedEvents(_rationedEvents)\n    }\n\n    const checkboxes = Object.keys(_rationedEvents)\n        .map(eveName => (\n            <div>\n                <label>\n                    {eveName}\n                    <input name={eveName}\n                           type='checkbox' checked={_rationedEvents[eveName]} onClick={handleClick}/>\n                </label>\n            </div>\n        ))\n\n    return (<div>\n        <button onClick={submitEvents}>Submit events</button>\n        {checkboxes}\n    </div>)\n}\n\nexport interface RationedEventSelectorProps {\n    submitRationedEvents: (events: { [key: string]: boolean }) => void\n}\n","import React, {useState} from 'react';\nimport logo from './assets/logo.svg';\nimport './App.css';\nimport {City, CityProp} from \"./modules/city\";\nimport {Cities} from \"./Cities\";\nimport {Board} from \"./Board\";\nimport {Players} from \"./Players\";\nimport {Deck, DeckView} from \"./deck/DeckProvider\";\nimport {RationedEventSelector} from \"./deck/RationedEventSelector\";\n\nfunction App() {\n\n    const [rationedEvents, updateRationedEventsState] = useState<string[]>([])\n\n    const updateRationedEvents = (events: { [key: string]: boolean }) => {\n        Object.keys(events).forEach(eventName => {\n            if (events[eventName]) {\n                rationedEvents.push(eventName)\n            }\n        })\n\n        updateRationedEventsState(rationedEvents.slice())\n    }\n\n    let deckView = (<span></span>);\n    let deck = null;\n\n    if (rationedEvents.length > 0) {\n        deck = new Deck(rationedEvents)\n\n        deckView = (DeckView(deck))\n    } else {\n        deckView = <RationedEventSelector submitRationedEvents={updateRationedEvents}/>\n    }\n\n    return (\n        <div>\n            <div className='d-flex flex-row'>\n                <div className={'board col-8'}>\n                    <Board></Board>\n                </div>\n\n                <div className={'cities col-3'}>\n                    <Cities></Cities>\n                </div>\n            </div>\n\n            <div className='d-flex flex-row row'>\n                <div className='col-8'>\n                    {Players({deck: deck})}\n                </div>\n\n                <div className='col-3'>\n                    {deckView}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}